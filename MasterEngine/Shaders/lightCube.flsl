#version 330 core

out vec4 fragColor;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 objectColor;
};

uniform Material material;

uniform vec3 lightColor = vec3(1.0, 1.0, 1.0);
uniform vec3 cameraPos;
uniform vec3 lightPosition;
float shinness = 128.0;

in vec3 normCoords;
in vec3 wPos;
in vec4 fragPosInLightSpace;

uniform sampler2D shadowMap;

float shadowCalculations(vec4 fragPositionLight, vec3 lightDir)
{
	vec3 projectCoords = fragPositionLight.xyz / fragPositionLight.w;
	
	projectCoords = projectCoords * 0.5 + 0.5;
	
	if(projectCoords.z > 1.0)
		return 0.0;
	
	float closestDepth = texture(shadowMap, projectCoords.xy).r;   
	
	float currentDepth = projectCoords.z;
	
	float bias = max(0.05 * (1.0 - dot(normCoords, lightDir)), 0.005); 

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadowMap, projectCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 9.0;	

	return shadow;
}

vec3 calculateAmbientLight()
{
	vec3 ambientLight = material.ambient * lightColor;
	return ambientLight;
}

vec3 calculateDiffuseLight(vec3 lightPos)
{
	float diffuseColor = max(dot(lightPos, normCoords), 0.0);
	
	vec3 diffuseLight = material.diffuse * diffuseColor;
	
	return diffuseLight;
}

vec3 calculateSpecularLight(vec3 lightPos)
{
	vec3 lightReflected = reflect(-lightPos, normCoords);
	vec3 cameraWorldPostion = normalize(cameraPos - wPos);
	float specularColor = pow(max(dot(cameraWorldPostion, lightReflected), 0.0), shinness);
	vec3 specularLight = material.specular * specularColor;
	
	return specularLight;
}

void main()
{
	vec3 lightPos = normalize(lightPosition - wPos);
	vec3 ambientLight = calculateAmbientLight();
	vec3 diffuseLight = calculateDiffuseLight(lightPos);
	vec3 specularLight = calculateSpecularLight(lightPos);
	float shadowValue = shadowCalculations(fragPosInLightSpace, lightPos);
	fragColor = vec4((ambientLight + (1.0 - shadowValue) *  (diffuseLight + specularLight)) * material.objectColor, 1.0);
}