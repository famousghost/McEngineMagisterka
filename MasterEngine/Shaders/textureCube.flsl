#version 330 core

uniform sampler2D texture1;
uniform sampler2D normalTexture;

in vec3 normCoords;
in vec3 wPos;
in vec2 texturesCoords;
in mat3 TBN;

out vec4 fragColor;

uniform vec3 cameraPos;
uniform vec3 lightPosition;
in vec4 fragPosInLightSpace;
float shinness = 128.0;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 objectColor;
};

uniform Material material;

uniform sampler2D shadowMap;

float shadowCalculations(vec4 fragPositionLight, vec3 lightDir)
{
	vec3 projectCoords = fragPositionLight.xyz / fragPositionLight.w;
	
	projectCoords = projectCoords * 0.5 + 0.5;
	
	if(projectCoords.z > 1.0)
		return 0.0;
	
	float closestDepth = texture(shadowMap, projectCoords.xy).r;   
	
	float currentDepth = projectCoords.z;
	
	float bias = max(0.05 * (1.0 - dot(normCoords, lightDir)), 0.005); 

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadowMap, projectCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 9.0;	

	return shadow;
}

vec3 calculateAmbientLight()
{
	vec3 ambientLight = material.ambient * material.objectColor;
	return ambientLight;
}

vec3 calculateDiffuseLight(vec3 lightPos, vec3 normalCor)
{
	float diffueColor = max(dot(lightPos, normalCor), 0.0);
	vec3 diffuseLight = material.diffuse * diffueColor * material.objectColor;
	
	return diffuseLight;
}

vec3 calculateSpecularLight(vec3 lightPos, vec3 normalCor)
{
	vec3 lightReflected = reflect(-lightPos, normalCor);
	vec3 cameraWorldPostion = normalize(cameraPos - wPos);
	float specularColor = pow(max(dot(cameraWorldPostion, lightReflected), 0.0), shinness);
	vec3 specularLight = material.specular * specularColor * material.objectColor;
	
	return specularLight;
}

void main()
{
	vec3 normalCor = texture(normalTexture, texturesCoords).rgb;
	vec3 lightPos = normalize(lightPosition - wPos);
	vec3 ambientLight = calculateAmbientLight();
	vec3 diffuseLight;
	vec3 specularLight;
	if (normalCor != vec3(0.0, 0.0, 0.0))
	{
		normalCor = normalize(normalCor * 2.0 - 1.0);
		normalCor = normalize(TBN * normalCor);
		diffuseLight = calculateDiffuseLight(lightPos, normalCor) + calculateDiffuseLight(lightPos, normCoords);
		specularLight = calculateSpecularLight(lightPos, normalCor) + calculateDiffuseLight(lightPos, normCoords);
	}
	else
	{
		diffuseLight = calculateDiffuseLight(lightPos, normCoords);
		specularLight = calculateDiffuseLight(lightPos, normCoords);
	}
	float shadowValue = shadowCalculations(fragPosInLightSpace, lightPos);
	vec4 textureColor = texture(texture1, texturesCoords);
	fragColor = textureColor * vec4(ambientLight + (1.0 - shadowValue) * (diffuseLight + specularLight), 1.0);
}