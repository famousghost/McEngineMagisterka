#version 330 core

uniform sampler2D texture1;

in vec3 normCoords;
in vec4 wPos;
in vec2 texturesCoords;

out vec4 fragColor;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 objectColor;
};


vec4 lightPosition = vec4(1.0, 2.0, 2.0, 1.0);
vec4 cameraPos = vec4(0.0, 0.0, -3.0, 1.0);

uniform Material material;

void main()
{
	vec3 ambientLight = material.ambient * material.objectColor;
	vec3 diffuseLight = material.diffuse;
	vec3 specularLight = material.specular;
	vec4 lightPos = lightPosition - wPos;
	float lightColor = max(dot(vec3(lightPos), normCoords), 0.0);
	
	diffuseLight *= lightColor * material.objectColor;
	
	vec3 lightReflected = 2 * max(dot(vec3(lightPos), normCoords), 0.0) * normCoords;
	vec4 cameraWorldPostion = wPos - cameraPos;
	
	float specularColor = pow(max(dot(vec3(cameraWorldPostion),lightReflected), 0.0), 32.0);
	
	specularLight *= specularColor * material.objectColor;
	
	fragColor = texture(texture1, texturesCoords) * vec4(ambientLight + diffuseLight + specularLight, 1.0);
}