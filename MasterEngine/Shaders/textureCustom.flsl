#version 330 core

in vec3 normCoords;
in vec3 wPos;
in vec2 texturesCoords;

out vec4 fragColor;

uniform vec3 cameraPos;
uniform vec3 lightPosition;
uniform sampler2D texture1;

float shinness = 128.0;

struct TextureMaterial
{
	sampler2D texture_diffuse1;
	sampler2D texture_diffuse2;
	sampler2D texture_diffuse3;
	sampler2D texture_specular1;
	sampler2D texture_specular2;
};

uniform TextureMaterial textureMaterial;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 objectColor;
};

uniform Material material;

vec3 calculateAmbientLight()
{
	vec3 ambientLight = material.ambient * material.objectColor;
	return ambientLight;
}

vec3 calculateDiffuseLight(vec3 lightPos)
{
	float diffueColor = max(dot(lightPos, normCoords), 0.0);
	vec3 diffuseLight = material.diffuse * diffueColor * material.objectColor;
	
	return diffuseLight;
}

vec3 calculateSpecularLight(vec3 lightPos)
{
	vec3 lightReflected = reflect(-lightPos, normCoords);
	vec3 cameraWorldPostion = normalize(cameraPos - wPos);
	float specularColor = pow(max(dot(cameraWorldPostion, lightReflected), 0.0), shinness);
	vec3 specularLight = material.specular * specularColor * material.objectColor;
	
	return specularLight;
}

vec4 prepareMeshTxture()
{
	vec4 tex_diffuse1 = texture(textureMaterial.texture_diffuse1, texturesCoords);
	vec4 tex_diffuse2 = texture(textureMaterial.texture_diffuse2, texturesCoords);
	vec4 tex_diffuse3 = texture(textureMaterial.texture_diffuse3, texturesCoords);
	vec4 tex_specular1 = texture(textureMaterial.texture_specular1, texturesCoords);
	vec4 tex_specular2 = texture(textureMaterial.texture_specular2, texturesCoords);
	
	vec4 resultTexture = mix(tex_diffuse1, tex_diffuse2, 0.5);
	resultTexture = mix(resultTexture, tex_diffuse3, 0.5);
	resultTexture = mix(resultTexture, tex_specular1, 0.5);
	resultTexture = mix(resultTexture, tex_specular2, 0.5);
	
	return resultTexture;
}

void main()
{
	vec3 lightPos = normalize(lightPosition - wPos);

	vec3 ambientLight = calculateAmbientLight();
	vec3 diffuseLight = calculateDiffuseLight(lightPos);
	vec3 specularLight = calculateSpecularLight(lightPos);
	vec4 resultTexture = prepareMeshTxture();
	
	fragColor = resultTexture * vec4(ambientLight + diffuseLight + specularLight, 1.0);
}